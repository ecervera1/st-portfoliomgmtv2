"""
#PORTFOLIO -----------------------------------------------------------------------
if st.sidebar.checkbox('Portflio', value=False):
    # Password for access
    correct_password = "ud"
    # Create a checkbox to toggle password visibility
    show_password = st.checkbox("Show Password")
    # Create an input box for the password
    password_input = st.text_input("Enter Password", type="password")



    
    # Check if the password is correct
    if password_input == correct_password:
        def get_industry(symbol):
            try:
                stock_info = yf.Ticker(symbol).info
                industry = stock_info.get("sector", "Treasury")
                return industry
            except Exception as e:
                print(f"Error fetching industry for {symbol}: {str(e)}")
                return "Error"
    
        # Function to load the data and add industry information
        def load_data():
            # Load your data here
            df = pd.read_csv('SMIF Portfolio Positions_03042024.csv')
            #df = pd.read_csv('Portfolio Positions_02092024.xlsx', usecols=lambda col: col != 'Unnamed: 0')
        
            # Fetch the industry for each symbol and add it as a column
            df['Industry'] = df['Symbol'].apply(get_industry)
            return df
        
        # Streamlit script starts here
        st.title('Portfolio')
        
        # Load data with industry information
        df = load_data()
        selected_columns = ['Symbol', 'Description', 'Current Value', 'Percent Of Account', 'Quantity', 'Cost Basis Total', 'Industry']
        #df = df[selected_columns]
        #df = df.iloc[1::2, :][selected_columns]
    
        condition = df['Quantity'].notnull()
        df = df.loc[condition, selected_columns]
    
    
        # Apply the function to split the column into three columns
        #df[['Middle Part', 'Dollar Amount', 'Percentage']] = df['Current Value % of Account'].apply(split_current_value).apply(pd.Series)
        #new_column_names = {'Middle Part': 'Current Value', 'Dollar Amount': 'Cost', 'Percentage': 'Percentage of Portfolio'}
        #df.rename(columns=new_column_names, inplace=True)
        
        #df=df.reset_index(drop=True)
        #df=df.iloc[:, [0,2,3,4,5,6]]
        #df['Percentage of Portfolio'] = df['Percentage of Portfolio'].apply(lambda x: "{:.0%}".format(x))
    
        st.dataframe(df)
        
        # Filter UI
        #industries = df['Industry'].unique()
        #selected_industry = st.selectbox('Select Industry', ['All'] + list(industries))  # Add 'All' as an option
        
        # Filtering data based on selection
        #if selected_industry == 'All':
            #filtered_data = df  # Show all data
        #else:
            #filtered_data = df[df['Industry'] == selected_industry]
        
        # Displaying filtered data
        #st.dataframe(filtered_data)

        #df['Percent Of Account'] = pd.to_numeric(df['Percent Of Account'], errors='coerce')
        df['Percent Of Account'] = df['Percent Of Account'].str.replace('%', '').astype(float)
        industry_percentages = df['Percent Of Account'].groupby(df['Industry']).sum() / df['Percent Of Account'].sum()
        symbol_percentages = df['Percent Of Account'].groupby(df['Symbol']).sum() / df['Percent Of Account'].sum()
        
        # Create a pie chart for industries
        plt.figure(figsize=(8, 8))
        plt.pie(industry_percentages, labels=industry_percentages.index, autopct='%1.1f%%', startangle=140)
        plt.title('Industries as % of Portfolio')
        plt.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular
        
        # Display the pie chart for industries
        plt.show()
        
        # Create a pie chart for symbols
        plt.figure(figsize=(8, 8))
        #plt.pie(symbol_percentages, labels=df['Symbol'], autopct='%1.1f%%', startangle=140)
        plt.title('Symbols as % of Portfolio')
        plt.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular
        
        # Display the pie chart for symbols
        plt.show()

        #Run analysis for portfolio optimizer ---------------------
        selected_tickers = st.multiselect('Select Ticker Symbols', df['Symbol'].unique())
        st.write('Selected Ticker Symbols:', selected_tickers)
        if st.button('Optimize Portfolio'):
        # Call the portfolio optimizer function with selected ticker symbols
            run_analysis(selected_tickers, start_date, end_date)
        
        
        #---------------
        st.sidebar.title('Portfolio Analysis')
        selected_chart = st.sidebar.radio('Select Chart:', ['Industries', 'Ticker'])
    
        # Display the selected chart
        if selected_chart == 'Industries':
            st.title('Industries as % of Portfolio')
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(industry_percentages, labels=industry_percentages.index, autopct='%1.1f%%', startangle=140)
            ax.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular
            st.pyplot(fig)
            
        else:
            #The following commented lines are to show as a pie chart, then the uncommented are as a bar chart
            #st.title('Symbols as % of Portfolio')
            #fig, ax = plt.subplots(figsize=(8, 8))
            #ax.pie(symbol_percentages, labels=df['Symbol'], autopct='%1.1f%%', startangle=140)
            #ax.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular
            #st.pyplot(fig)

            st.title('Symbols as % of Portfolio')
            plt.figure(figsize=(10, 14))
            sns.barplot(x=symbol_percentages.values, y=symbol_percentages.index, palette='viridis')
            plt.xlabel('Percentage of Portfolio')
            plt.ylabel('Symbol')
            plt.title('Symbols as % of Portfolio')
            st.pyplot()
    else:
        st.error("Wrong password. Please try again.")
        
        # Upload CSV file
        uploaded_file = st.file_uploader("Upload CSV", type=["csv"])
        if uploaded_file is not None:
            
        #THE FOLLOWING MUST BE CLEANED UP TO AVOID REPETETIVENESS BASED ON BEST PRACTICES:
            def get_industry(symbol):
                try:
                    stock_info = yf.Ticker(symbol).info
                    industry = stock_info.get("sector", "Treasury")
                    return industry
                except Exception as e:
                    print(f"Error fetching industry for {symbol}: {str(e)}")
                    return "Error"
            
                # Function to load the data and add industry information
                def load_data(file):
                    if file is not None:
                        df = pd.read_csv(file)
                        df['Industry'] = df['Symbol'].apply(get_industry)
                        return df
                    else:
                        return pd.DataFrame()
            
                df = load_data(uploaded_file)
                selected_columns = ['Symbol', 'Description', 'Current Value', 'Percent Of Account', 'Quantity', 'Cost Basis Total', 'Industry']
                condition = df['Quantity'].notnull()
                df = df.loc[condition, selected_columns]
                
                st.dataframe(df)
        
                df['Percent Of Account'] = df['Percent Of Account'].str.replace('%', '').astype(float)
                industry_percentages = df['Percent Of Account'].groupby(df['Industry']).sum() / df['Percent Of Account'].sum()
                symbol_percentages = df['Percent Of Account'].groupby(df['Symbol']).sum() / df['Percent Of Account'].sum()
        
                # Run analysis for portfolio optimizer
                selected_tickers = st.multiselect('Select Ticker Symbols', df['Symbol'].unique())
                st.write('Selected Ticker Symbols:', selected_tickers)
                if st.button('Optimize Portfolio'):
                    # Call the portfolio optimizer function with selected ticker symbols
                    run_analysis(selected_tickers, start_date, end_date)
        
                st.sidebar.title('Portfolio Analysis')
                selected_chart = st.sidebar.radio('Select Chart:', ['Industries', 'Ticker'])
        
                # Display the selected chart
                if selected_chart == 'Industries':
                    st.title('Industries as % of Portfolio')
                    fig, ax = plt.subplots(figsize=(8, 8))
                    ax.pie(industry_percentages, labels=industry_percentages.index, autopct='%1.1f%%', startangle=140)
                    ax.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular
                    st.pyplot(fig)
                    
                else:
                    st.title('Symbols as % of Portfolio')
                    plt.figure(figsize=(10, 14))
                    sns.barplot(x=symbol_percentages.values, y=symbol_percentages.index, palette='viridis')
                    plt.xlabel('Percentage of Portfolio')
                    plt.ylabel('Symbol')
                    plt.title('Symbols as % of Portfolio')
                    st.pyplot()
"""
